@import "colors";

$colors: (
  green: $green,
  lightgreen: $lightgreen,
  darkgreen: $darkgreen,
  neongreen: $neongreen,
  blue: $blue,
  lightblue: $lightblue,
  darkblue: $darkblue,
  neonblue: $neonblue,
  red: $red,
  lightred: $lightred,
  darkred: $darkred,
  neonred: $neonred,
  yellow: $yellow,
  lightyellow: $lightyellow,
  darkyellow: $darkyellow,
  neonyellow: $neonyellow,
  orange: $orange,
  lightorange: $lightorange,
  darkorange: $darkorange,
  neonorange: $neonorange,
  violet: $violet,
  lightviolet: $lightviolet,
  darkviolet: $darkviolet,
  neonviolet: $neonviolet,
  pink: $pink,
  lightpink: $lightpink,
  darkpink: $darkpink,
  neonpink: $neonpink,
  white: $white,
  lightwhite: $lightwhite,
  darkwhite: $darkwhite,
  neonwhite: $neonwhite,
  black: $black,
  lightblack: $lightblack,
  darkblack: $darkblack,
  neonblack: $neonblack,
  gold: $gold,
  lightgold: $lightgold,
  darkgold: $darkgold,
  neongold: $neongold,
  silver: $silver,
  lightsilver: $lightsilver,
  darksilver: $darksilver,
  neonsilver: $neonsilver,
  brown: $brown,
  lightbrown: $lightbrown,
  darkbrown: $darkbrown,
  neonbrown: $neonbrown,
);

//Normal
@each $key, $val in $colors {
  .btn-normal {
    color: #000;
    text-align: center;
    border: none;
    transition: all 0.35s ease-in-out;
    &.color-#{$key} {
      background: $val;
      @if $key ==
        black or
        $key ==
        lightblack or
        $key ==
        darkblack or
        $key ==
        neonblack or
        $key ==
        brown or
        $key ==
        darkbrown
      {
        color: white;
      } @else {
        color: black;
      }
      &:hover {
        background: transparent;
        color: $val;
        transition: all 0.35s ease-in-out;
      }
    }
  }
}
@each $key, $val in $colors {
  @each $key2, $val2 in $colors {
    .btn-normal {
      color: #000;
      transition: all 0.35s ease-in-out;
      text-align: center;
      border: none;
      &.color-#{$key}-#{$key2} {
        background: linear-gradient(60deg, $val, $val2);
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &:hover {
          background: transparent;
          color: $val;
          transition: all 0.35s ease-in-out;
        }
      }
    }
  }
}

// Neograd ///
@each $key, $val in $colors {
  .btn-neograd {
    color: #000;
    transition: all 400ms ease-in-out;
    text-align: center;
    border: none;
    &.color-#{$key} {
      background: linear-gradient(10deg, lighten($val, 10%), darken($val, 10%));
      box-shadow: 1px 1px 40px $val inset;
      @if $key ==
        black or
        $key ==
        lightblack or
        $key ==
        darkblack or
        $key ==
        neonblack or
        $key ==
        brown or
        $key ==
        darkbrown
      {
        color: white;
      } @else {
        color: black;
      }
      &:hover {
        box-shadow: 0 0 10px 0 $val inset, 0 0 10px 3px $val;
        background: transparent;
        color: $val;
      }
    }
  }
}

@each $key, $val in $colors {
  @each $key2, $val2 in $colors {
    .btn-neograd {
      color: #000;
      transition: all 400ms ease-in-out;
      text-align: center;
      border: none;
      &.color-#{$key}-#{$key2} {
        background: linear-gradient(60deg, $val, $val2);
        box-shadow: 1px 1px 4px $val inset;
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &:hover {
          box-shadow: 0 0 10px 0 $val inset, 0 0 10px 3px $val2;
          background: transparent;
        }
      }
    }
  }
}

// Neograd Reverse
@each $key, $val in $colors {
  .btn-neograd-r {
    background: transparent;
    &.color-#{$key} {
      box-shadow: 0 0 10px 0 $val inset, 0 0 10px 0px $val;
      border-color: $val;
      color: $val;
      &:hover {
        background: linear-gradient(
          60deg,
          lighten($val, 10%),
          darken($val, 10%)
        );
        box-shadow: 1px 1px 40px $val inset;
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        transition: all 400ms ease-in-out;
      }
    }
  }
}
@each $key, $val in $colors {
  @each $key2, $val2 in $colors {
    .btn-neograd-r {
      background: transparent;
      &.color-#{$key}-#{$key2} {
        box-shadow: 0 0 10px 0 $val, 0 0 10px 0px $val2;
        border-color: $val;
        color: $val;
        &:hover {
          background: linear-gradient(60deg, $val, $val2);
          box-shadow: 1px 1px 10px $val, 1px 1px 10px $val2;
          transition: all 400ms ease-in-out;
          @if $key ==
            black or
            $key ==
            lightblack or
            $key ==
            darkblack or
            $key ==
            neonblack or
            $key ==
            brown or
            $key ==
            darkbrown
          {
            color: white;
          } @else {
            color: black;
          }
        }
      }
    }
  }
}

// Gradient
@each $key, $val in $colors {
  .btn-grad {
    background: linear-gradient(to left, $lightgreen, $darkgreen);
    border: none;
    color: #000;
    transition: all 200ms ease-in-out;
    &.color-#{$key} {
      background: linear-gradient(
        to left,
        lighten($val, 10%),
        darken($val, 10%)
      );
      @if $key ==
        black or
        $key ==
        lightblack or
        $key ==
        darkblack or
        $key ==
        neonblack or
        $key ==
        brown or
        $key ==
        darkbrown
      {
        color: white;
      } @else {
        color: black;
      }
      &:hover {
        box-shadow: inset -3px 3px 10px lighten($val, 10%),
          inset 3px -3px 10px darken($val, 10%);
      }
    }
  }
}

@each $key, $val in $colors {
  @each $key2, $val2 in $colors {
    .btn-grad {
      background: linear-gradient(45deg, $val, $val2);
      border: none;
      transition: all 200ms ease-in-out;
      &.color-#{$key}-#{$key2} {
        background: linear-gradient(45deg, $val, $val2);
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &:hover {
          box-shadow: inset -3px 3px 10px lighten($val2, 10%),
            inset 3px -3px 10px darken($val, 10%);
        }
      }
    }
  }
}

@each $key, $val in $colors {
  .btn-grad-radial {
    background: radial-gradient(darken($val, 10%), lighten($val, 10%));
    border: none;
    color: #000;
    transition: all 200ms ease-in-out;
    &.color-#{$key} {
      background: radial-gradient(darken($val, 10%), lighten($val, 10%));
      @if $key ==
        black or
        $key ==
        lightblack or
        $key ==
        darkblack or
        $key ==
        neonblack or
        $key ==
        brown or
        $key ==
        darkbrown
      {
        color: white;
      } @else {
        color: black;
      }
      &:hover {
        background: radial-gradient(lighten($val, 10%), darken($val, 10%));
      }
    }
  }
}

@each $key, $val in $colors {
  @each $key2, $val2 in $colors {
    .btn-grad-radial {
      background: radial-gradient(darken($val, 10%), lighten($val2, 10%));
      border: none;
      color: #000;
      transition: all 200ms ease-in-out;
      &.color-#{$key}-#{$key2} {
        background: radial-gradient($val, $val2);
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &:hover {
          background: radial-gradient($val2, $val);
        }
      }
    }
  }
}

// Solid
@each $key, $val in $colors {
  .btn-solid {
    border: none;
    &.color-#{$key} {
      background: $val;
      @if $key ==
        black or
        $key ==
        lightblack or
        $key ==
        darkblack or
        $key ==
        neonblack or
        $key ==
        brown or
        $key ==
        darkbrown
      {
        color: white;
      } @else {
        color: black;
      }
    }
    &-border {
      background: transparent;
      border: 2px groove;
      &.color-#{$key} {
        border-color: $val;
        color: $val;
      }
    }
  }
}
@each $key, $val in $colors {
  @each $key2, $val2 in $colors {
    .btn-solid {
      border: none;
      &.color-#{$key}-#{$key2} {
        background: linear-gradient(45deg, $val, $val2);
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
      }
      &-border {
        background: transparent;
        border: 2px groove;
        &.color-#{$key}-#{$key2} {
          border-color: $val $val2;
          color: $val;
        }
      }
    }
  }
}

// Neon
@each $key, $val in $colors {
  .btn-neon {
    border: none;
    transition: box-shadow 400ms;
    &.color-#{$key} {
      background: $val;
      box-shadow: 0 0 10px $val, 0 0 10px $val inset;
      @if $key ==
        black or
        $key ==
        lightblack or
        $key ==
        darkblack or
        $key ==
        neonblack or
        $key ==
        brown or
        $key ==
        darkbrown
      {
        color: white;
      } @else {
        color: black;
      }
      &:hover {
        box-shadow: 0 0 5px $val, 0 0 25px $val, 0 0 50px $val;
      }
    }
    &-border {
      background: transparent;
      border: none;
      transition: box-shadow 400ms;
      &.color-#{$key} {
        box-shadow: 0 0 10px $val, 0 0 10px 3px $val inset;
        color: $val;
        &:hover {
          box-shadow: 0 0 15px $val, 0 0 15px 3px $val inset;
        }
      }
    }
    &-reflex {
      color: #000;
      border: none;
      transition: 0.5s;
      letter-spacing: 4px;
      -webkit-box-reflect: below 1px linear-gradient(transparent, #0005);
      margin: 30px 0;
      &.color-#{$key} {
        background: $val;
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &:hover {
          color: #000;
          box-shadow: 0 0 5px $val, 0 0 25px $val, 0 0 50px $val;
        }
      }
    }
  }
}

@each $key, $val in $colors {
  @each $key2, $val2 in $colors {
    .btn-neon {
      border: none;
      transition: box-shadow 400ms;
      &.color-#{$key}-#{$key2} {
        background: linear-gradient(45deg, $val, $val2);
        box-shadow: 0 0 15px $val, 0 0 15px 3px $val inset;
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &:hover {
          box-shadow: 0 0 10px $val, 0 0 10px 3px $val inset;
        }
      }
      &-border {
        background: transparent;
        border: none;
        transition: box-shadow 400ms;
        &.color-#{$key}-#{$key2} {
          box-shadow: 0 0 15px $val, 0 0 15px 3px $val2 inset;
          color: $val;
          &:hover {
            box-shadow: 0 0 10px $val, 0 0 10px 3px $val2 inset;
          }
        }
      }
      &-reflex {
        color: #000;
        border: none;
        transition: 0.5s;
        letter-spacing: 4px;
        -webkit-box-reflect: below 1px linear-gradient(transparent, #0005);
        margin: 30px 0;
        &.color-#{$key}-#{$key2} {
          background: linear-gradient(45deg, $val, $val2);
          @if $key ==
            black or
            $key ==
            lightblack or
            $key ==
            darkblack or
            $key ==
            neonblack or
            $key ==
            brown or
            $key ==
            darkbrown
          {
            color: white;
          } @else {
            color: black;
          }
          &:hover {
            color: #000;
            box-shadow: 0 0 5px $val, 0 0 25px $val, 0 0 50px $val,
              0 0 5px $val2, 0 0 25px $val2, 0 0 50px $val2;
          }
        }
      }
    }
  }
}

////// Border move
.btn-border-move {
  position: relative;
  padding: 10px 30px;
  margin: 0 15px;
  background: transparent;
  border: none;
  text-decoration: none;
  overflow: hidden;
  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 10px;
    height: 10px;
    border-top: 2px solid blue;
    border-left: 2px solid blue;
    border-radius: inherit;
    transition: 0.5s;
  }
  &:hover:before {
    width: 100%;
    height: 100%;
  }
  &::after {
    content: "";
    position: absolute;
    bottom: 0;
    right: 0;
    width: 10px;
    height: 10px;
    border-bottom: 2px solid red;
    border-right: 2px solid red;
    border-radius: inherit;
    transition: 0.5s;
  }
  &:hover::after {
    width: 100%;
    height: 100%;
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      color: $val;
      &::before {
        border-color: $val;
      }
      &::after {
        border-color: $val;
      }
    }
  }

  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        color: $val;
        &::before {
          border-color: $val;
        }
        &::after {
          border-color: $val2;
        }
      }
    }
  }
}

.btn-border-move-light {
  position: relative;
  padding: 10px 30px;
  margin: 0 15px;
  color: inherit;
  background: transparent;
  border: none;
  text-decoration: none;
  overflow: hidden;
  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 10px;
    height: 10px;
    border-top: 2px solid;
    border-left: 2px solid;
    border-color: inherit;
    border-radius: inherit;
    transition: 0.5s;
  }
  &:hover:before {
    width: 100%;
    height: 100%;
  }
  &::after {
    content: "";
    position: absolute;
    bottom: 0;
    right: 0;
    width: 10px;
    height: 10px;
    border-bottom: 2px solid;
    border-right: 2px solid;
    border-color: inherit;
    border-radius: inherit;
    transition: 0.5s;
  }
  &:hover::after {
    width: 100%;
    height: 100%;
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      color: $val;
      &:hover {
        background: $val;
        box-shadow: 0 0 20px $val;
        border: none;
        transition-delay: 0.5s;
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        color: $val;
        transition: all 0.3s ease-in-out;
        &::before {
          border-color: $val;
        }
        &::after {
          border-color: $val2;
        }
        &:hover {
          background: $val;
          box-shadow: -10px -10px 20px $val, 10px 10px 20px $val2;
          border: none;
          transition-delay: 0.5s;
          @if $key ==
            black or
            $key ==
            lightblack or
            $key ==
            darkblack or
            $key ==
            neonblack or
            $key ==
            brown or
            $key ==
            darkbrown
          {
            color: white;
          } @else {
            color: black;
          }
        }
      }
    }
  }
}

// SLIDE
////SLIDE LEFT////
.btn-slide-left {
  text-align: center;
  position: relative;
  transition: all 0.35s;
  background: transparent;
  border: inherit;
  z-index: 1;
  &::after {
    position: absolute;
    content: "";
    top: 0;
    left: 0;
    width: 0;
    height: 100%;
    transition: all 1s;
    border-radius: inherit;
    z-index: -1;
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      box-shadow: 0px 0px 5px $val;
      overflow: hidden;
      color: $val;
      &::after {
        background: linear-gradient(61deg, lighten($val, 10%) 0%, $val 100%);
      }
      &:hover {
        box-shadow: 0px 0px 1px $val, 0px 0px 1px lighten($val, 10%);
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }

        &::after {
          width: 100%;
        }
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        color: $val;
        box-shadow: 0px 0px 5px $val2, 0px 0px 5px $val;
        overflow: hidden;
        &::after {
          background: linear-gradient(61deg, $val2 0%, $val 100%);
        }
        &:hover {
          box-shadow: 0px 0px 1px $val2, 0px 0px 1px $val;
          @if $key ==
            black or
            $key ==
            lightblack or
            $key ==
            darkblack or
            $key ==
            neonblack or
            $key ==
            brown or
            $key ==
            darkbrown
          {
            color: white;
          } @else {
            color: black;
          }
          &::after {
            width: 100%;
          }
        }
      }
    }
  }
}

////SLIDE RIGHT/////
.btn-slide-right {
  text-align: center;
  position: relative;
  transition: all 0.35s;
  background: transparent;
  border: inherit;
  z-index: 1;
  &::after {
    position: absolute;
    content: "";
    top: 0;
    right: 0;
    width: 0;
    height: 100%;
    transition: all 0.5s;
    border-radius: inherit;
    z-index: -1;
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      color: $val;
      box-shadow: 0px 0px 5px $val;
      overflow: hidden;
      &::after {
        background: linear-gradient(61deg, lighten($val, 10%) 0%, $val 100%);
      }
      &:hover {
        box-shadow: 0px 0px 1px $val;
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &::after {
          width: 100%;
        }
        & span {
          color: inherit;
        }
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        color: $val;
        box-shadow: 0px 0px 5px $val2, 0px 0px 5px $val;
        overflow: hidden;
        &::after {
          background: linear-gradient(61deg, $val2 0%, $val 100%);
        }
        &:hover {
          box-shadow: 0px 0px 1px $val2, 0px 0px 1px $val;
          @if $key ==
            black or
            $key ==
            lightblack or
            $key ==
            darkblack or
            $key ==
            neonblack or
            $key ==
            brown or
            $key ==
            darkbrown
          {
            color: white;
          } @else {
            color: black;
          }
          &::after {
            width: 100%;
          }
        }
      }
    }
  }
}

////SLIDE DOWN////
.btn-slide-down {
  text-align: center;
  position: relative;
  transition: all 0.35s;
  background: transparent;
  border: inherit;
  z-index: 1;
  &::after {
    position: absolute;
    content: "";
    bottom: 0;
    left: 0;
    width: 100%;
    height: 0;
    transition: all 0.5s;
    border-radius: inherit;
    z-index: -1;
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      color: $val;
      box-shadow: 0px 0px 5px $val;
      overflow: hidden;
      &::after {
        background: linear-gradient(61deg, lighten($val, 10%) 0%, $val 100%);
      }
      &:hover {
        box-shadow: 0px 0px 5px $val;
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &::after {
          height: 100%;
        }
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        color: $val;
        box-shadow: inset 0px 0px 5px $val;
        overflow: hidden;
        &::after {
          background: linear-gradient(180deg, $val2 0%, $val 100%);
        }
        &:hover {
          box-shadow: 0 0 1px $val2, 0px 0px 1px $val;
          @if $key ==
            black or
            $key ==
            lightblack or
            $key ==
            darkblack or
            $key ==
            neonblack or
            $key ==
            brown or
            $key ==
            darkbrown
          {
            color: white;
          } @else {
            color: black;
          }
          &::after {
            height: 100%;
          }
        }
      }
    }
  }
}

////SLIDE UP////
.btn-slide-up {
  text-align: center;
  position: relative;
  transition: all 0.35s;
  background: transparent;
  border: inherit;
  z-index: 1;
  &::after {
    position: absolute;
    content: "";
    top: 0;
    left: 0;
    width: 100%;
    height: 0;
    color: #fff;
    transition: all 0.5s;
    border-radius: inherit;
    z-index: -1;
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      color: $val;
      box-shadow: 0px 0px 5px $val;
      overflow: hidden;
      &::after {
        background: $val;
      }
      &:hover {
        box-shadow: 0px 0px 10px $val;
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &::after {
          height: 100%;
        }
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        color: $val;
        box-shadow: 0px 0px 5px $val;
        overflow: hidden;
        &::after {
          background: linear-gradient(180deg, $val2 0%, $val 100%);
        }
        &:hover {
          box-shadow: 0 0 1px $val2, 0px 0px 1px $val;
          @if $key ==
            black or
            $key ==
            lightblack or
            $key ==
            darkblack or
            $key ==
            neonblack or
            $key ==
            brown or
            $key ==
            darkbrown
          {
            color: white;
          } @else {
            color: black;
          }
          &::after {
            height: 100%;
          }
        }
      }
    }
  }
}

////SLIDE MIDDLE IN////
.btn-slide-middle-in {
  text-align: center;
  position: relative;
  transition: all 0.35s;
  background: transparent;
  border: inherit;
  z-index: 1;
  &::after {
    position: absolute;
    content: "";
    top: 0;
    left: 0;
    width: 100%;
    height: 0;
    color: #fff;
    transition: all 0.5s;
    border-radius: inherit;
    border-bottom-left-radius: 0px;
    border-bottom-right-radius: 0px;
    z-index: -1;
  }
  &::before {
    position: absolute;
    content: "";
    bottom: 0;
    right: 0;
    width: 100%;
    height: 0;
    color: #fff;
    transition: all 0.5s;
    border-radius: inherit;
    border-top-left-radius: 0px;
    border-top-right-radius: 0px;
    z-index: -1;
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      color: $val;
      box-shadow: 0px 0px 5px $val;
      overflow: hidden;
      &::after {
        background: $val;
      }
      &::before {
        background: $val;
      }
      &:hover {
        box-shadow: 0px 0px 10px $val;
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &::after {
          height: 50%;
        }
        &::before {
          height: 50%;
        }
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        color: $val;
        box-shadow: 0px 0px 5px $val;
        overflow: hidden;
        &::after {
          background: $val;
        }
        &::before {
          background: $val2;
        }
        &:hover {
          box-shadow: 0px 0px 10px $val;
          @if $key ==
            black or
            $key ==
            lightblack or
            $key ==
            darkblack or
            $key ==
            neonblack or
            $key ==
            brown or
            $key ==
            darkbrown
          {
            color: white;
          } @else {
            color: black;
          }
          &::after {
            height: 50%;
          }
          &::before {
            height: 50%;
          }
        }
      }
    }
  }
}

////SLIDE MIDDLE OUT////
.btn-slide-middle-out {
  text-align: center;
  position: relative;
  transition: all 0.35s;
  background: transparent;
  border: inherit;
  z-index: 1;
  &::after {
    position: absolute;
    content: "";
    top: 50%;
    left: 0;
    width: 100%;
    height: 0;
    color: #fff;
    transition: all 0.5s;
    border-radius: inherit;
    border-top-left-radius: 0px;
    border-top-right-radius: 0px;
    z-index: -1;
  }
  &::before {
    position: absolute;
    content: "";
    bottom: 50%;
    right: 0;
    width: 100%;
    height: 0;
    color: #fff;
    transition: all 0.5s;
    border-radius: inherit;
    border-bottom-left-radius: 0px;
    border-bottom-right-radius: 0px;
    z-index: -1;
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      color: $val;
      box-shadow: 0px 0px 5px $val;
      overflow: hidden;
      &::after {
        background: $val;
      }
      &::before {
        background: $val;
      }
      &:hover {
        box-shadow: 0px 0px 10px $val;
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &::after {
          height: 50%;
        }
        &::before {
          height: 50%;
        }
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        color: $val;
        box-shadow: 0px 0px 5px $val;
        overflow: hidden;
        &::after {
          background: $val;
        }
        &::before {
          background: $val2;
        }
        &:hover {
          box-shadow: 0px 0px 10px $val;
          @if $key ==
            black or
            $key ==
            lightblack or
            $key ==
            darkblack or
            $key ==
            neonblack or
            $key ==
            brown or
            $key ==
            darkbrown
          {
            color: white;
          } @else {
            color: black;
          }
          &::after {
            height: 50%;
          }
          &::before {
            height: 50%;
          }
        }
      }
    }
  }
}

////SLIDE CENTER IN////
.btn-slide-center-in {
  text-align: center;
  position: relative;
  transition: all 0.35s;
  background: transparent;
  border: inherit;
  z-index: 1;
  &::after {
    position: absolute;
    content: "";
    top: 0;
    left: 0;
    width: 0;
    height: 100%;
    color: #fff;
    transition: all 0.5s;
    border-radius: inherit;
    border-top-right-radius: 0px;
    border-bottom-right-radius: 0px;
    z-index: -1;
  }
  &::before {
    position: absolute;
    content: "";
    bottom: 0;
    right: 0;
    width: 0;
    height: 100%;
    color: #fff;
    transition: all 0.5s;
    border-radius: inherit;
    border-top-left-radius: 0px;
    border-bottom-left-radius: 0px;
    z-index: -1;
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      color: $val;
      box-shadow: 0px 0px 5px $val;
      overflow: hidden;
      &::after {
        background: $val;
      }
      &::before {
        background: $val;
      }
      &:hover {
        box-shadow: 0px 0px 10px $val;
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &::after {
          width: 50%;
        }
        &::before {
          width: 50%;
        }
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        color: $val;
        box-shadow: 0px 0px 5px $val;
        overflow: hidden;
        &::after {
          background: $val;
        }
        &::before {
          background: $val2;
        }
        &:hover {
          box-shadow: 0px 0px 10px $val2;
          @if $key ==
            black or
            $key ==
            lightblack or
            $key ==
            darkblack or
            $key ==
            neonblack or
            $key ==
            brown or
            $key ==
            darkbrown
          {
            color: white;
          } @else {
            color: black;
          }
          &::after {
            width: 50%;
          }
          &::before {
            width: 50%;
          }
        }
      }
    }
  }
}

////SLIDE CENTER OUT////
.btn-slide-center-out {
  text-align: center;
  position: relative;
  transition: all 0.35s;
  background: transparent;
  border: inherit;
  z-index: 1;

  &::after {
    position: absolute;
    content: "";
    top: 0;
    left: 50%;
    width: 0;
    height: 100%;
    color: #fff;
    transition: all 0.5s;
    border-radius: inherit;
    border-top-left-radius: 0px;
    border-bottom-left-radius: 0px;
    z-index: -1;
  }
  &::before {
    position: absolute;
    content: "";
    bottom: 0;
    right: 50%;
    width: 0;
    height: 100%;
    color: #fff;
    transition: all 0.5s;
    border-radius: inherit;
    border-top-right-radius: 0px;
    border-bottom-right-radius: 0px;
    z-index: -1;
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      color: $val;
      box-shadow: 0px 0px 5px $val;
      overflow: hidden;
      &::after {
        background: $val;
      }
      &::before {
        background: $val;
      }
      &:hover {
        box-shadow: 0px 0px 10px $val;
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &::after {
          width: 50%;
        }
        &::before {
          width: 50%;
        }
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        color: $val;
        box-shadow: 0px 0px 5px $val;
        overflow: hidden;
        &::after {
          background: $val;
        }
        &::before {
          background: $val2;
        }
        &:hover {
          box-shadow: 0px 0px 10px $val2;
          @if $key ==
            black or
            $key ==
            lightblack or
            $key ==
            darkblack or
            $key ==
            neonblack or
            $key ==
            brown or
            $key ==
            darkbrown
          {
            color: white;
          } @else {
            color: black;
          }
          &::after {
            width: 50%;
          }
          &::before {
            width: 50%;
          }
        }
      }
    }
  }
}

////SLIDE CIRCLE////
.btn-slide-circle {
  text-align: center;
  position: relative;
  transition: all 0.5s ease-in-out;
  background: transparent;
  border: inherit;
  overflow: hidden;
  z-index: 1;
  &::after {
    position: absolute;
    content: "";
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 0;
    height: 0;
    color: #000;
    transition: all 0.5s ease-in-out;
    border-radius: 100%;
    z-index: -1;
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      color: $val;
      box-shadow: 0px 0px 5px $val;
      &::after {
        background: $val;
      }
      &:hover {
        box-shadow: 0px 0px 10px $val;
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &::after {
          height: 300px;
          width: 300px;
        }
        & span {
          color: inherit;
        }
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        color: $val;
        box-shadow: 0px 0px 5px $val;
        &::after {
          background: radial-gradient($val, $val2);
        }
        &:hover {
          box-shadow: 0px 0px 10px $val;
          @if $key ==
            black or
            $key ==
            lightblack or
            $key ==
            darkblack or
            $key ==
            neonblack or
            $key ==
            brown or
            $key ==
            darkbrown
          {
            color: white;
          } @else {
            color: black;
          }
          &::after {
            height: 300px;
            width: 300px;
          }
        }
      }
    }
  }
}

//BEHIND BORDER
.btn-border-behind {
  border: none;
  position: relative;
  background: $green;
  transition: all 0.5s ease-in;
  &::before {
    position: absolute;
    content: "";
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.5;
    z-index: -1;
    border-radius: inherit;
    transition: all 0.5s ease-in;
  }
  &::after {
    position: absolute;
    content: "";
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.5;
    z-index: -1;
    border-radius: inherit;
    transition: all 0.5s ease-in;
  }
  &:hover {
    top: 0;
    left: 0;
    transition: all 0.5s ease-in;
    &::before {
      top: -15px;
      left: 15px;
      transition: all 0.35s ease-in;
    }
    &::after {
      top: 15px;
      left: -15px;
      transition: all 0.35s ease-in;
    }
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      background: linear-gradient(10deg, lighten($val, 10%), darken($val, 10%));
      @if $key ==
        black or
        $key ==
        lightblack or
        $key ==
        darkblack or
        $key ==
        neonblack or
        $key ==
        brown or
        $key ==
        darkbrown
      {
        color: white;
      } @else {
        color: black;
      }
      &:hover {
        &::before {
          border: 2px solid $val;
          box-shadow: 0 0 20px $val;
        }
        &::after {
          border: 2px solid $val;
          box-shadow: 0 0 20px $val;
        }
      }
    }
  }

  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        background: linear-gradient(10deg, $val, $val2);
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &:hover {
          &::before {
            border: 2px solid $val2;
            box-shadow: 0 0 20px $val2;
          }
          &::after {
            border: 2px solid $val;
            box-shadow: 0 0 20px $val;
          }
        }
      }
    }
  }
}

//BEHIND SHADOW
.btn-shadow-behind {
  border: none;
  position: relative;
  background: $green;
  transition: all 0.5s ease-in;
  &::before {
    position: absolute;
    content: "";
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.5;
    z-index: -1;
    border-radius: inherit;
  }
  &::after {
    position: absolute;
    content: "";
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.5;
    z-index: -1;
    border-radius: inherit;
  }
  &:hover {
    top: 0;
    left: 0;
    &::before {
      top: -15px;
      left: 15px;
      transition: all 0.35s ease-in;
    }
    &::after {
      top: 15px;
      left: -15px;
      transition: all 0.35s ease-in;
    }
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      background: linear-gradient(10deg, lighten($val, 10%), darken($val, 10%));
      @if $key ==
        black or
        $key ==
        lightblack or
        $key ==
        darkblack or
        $key ==
        neonblack or
        $key ==
        brown or
        $key ==
        darkbrown
      {
        color: white;
      } @else {
        color: black;
      }
      &:hover {
        &::before {
          background: $val;
          box-shadow: 0 0 20px $val;
        }
        &::after {
          background: $val;
          box-shadow: 0 0 20px $val;
        }
      }
    }
  }

  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        background: linear-gradient(10deg, $val, $val2);
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &:hover {
          &::before {
            background: $val2;
            box-shadow: 0 0 20px $val2;
          }
          &::after {
            background: $val;
            box-shadow: 0 0 20px $val;
          }
        }
      }
    }
  }
}

// DOUBLE BORDER
.btn-double-border {
  border: none;
  border-top: 2px groove;
  border-bottom: 2px groove;
  background: transparent;
  @each $key, $val in $colors {
    &.color-#{$key} {
      border-top-color: $val;
      border-bottom-color: $val;
      transition: all 0.35s ease-in;
      color: $val;
      &:hover {
        border-top: 10px groove $val;
        border-bottom: 10px groove $val;
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        border-top-color: $val;
        border-bottom-color: $val2;
        transition: all 0.35s ease-in;
        color: $val;
        &:hover {
          border-top: 10px groove $val;
          border-bottom: 10px groove $val2;
        }
      }
    }
  }
}

.btn-double-border2 {
  border: none;
  border-left: 2px groove;
  border-right: 2px groove;
  background: transparent;

  @each $key, $val in $colors {
    &.color-#{$key} {
      border-left-color: $val;
      border-right-color: $val;
      transition: all 0.35s ease-in;
      color: $val;
      &:hover {
        border-left: 10px groove $val;
        border-right: 10px groove $val;
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        border-left-color: $val;
        border-right-color: $val2;
        transition: all 0.35s ease-in;
        color: $val;
        &:hover {
          border-left: 10px groove $val;
          border-right: 10px groove $val2;
        }
      }
    }
  }
}

.btn-hide-border {
  letter-spacing: 0;
  background: transparent;
  border: none;
  line-height: 50px;
  color: white;
  transition: all 0.35s ease-in;

  &:hover,
  &:active {
    letter-spacing: 5px;
  }

  &:after,
  &:before {
    border: 1px solid rgba(0, 0, 0, 0);
    bottom: 0px;
    content: " ";
    display: block;
    margin: 0 auto;
    position: relative;
    transition: all 280ms ease-in-out;
    width: 0;
  }

  &:hover:after,
  &:hover:before {
    border-color: #fff;
    transition: width 350ms ease-in-out;
    width: 100%;
  }

  &:hover:before {
    bottom: auto;
    top: 0;
    width: 100%;
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      color: $val;
      &:hover::after,
      &:hover::before {
        border-color: $val;
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        color: $val;
        &:hover {
          &::before {
            border-color: $val;
          }
          &::after {
            border-color: $val2;
          }
        }
      }
    }
  }
}

// SURROUND ///
.btn-surround-border-hover {
  position: relative;
  background: green;
  border: none;
  margin: auto 40px;
  &::before {
    content: "";
    border-radius: inherit;
    width: 0;
    height: 0;
    border: 5px solid $black;
    box-shadow: 0 0 60px rgba(0, 0, 0, 0.64);
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    opacity: 0;
    transition: all 0.3s ease-in-out 0s;
    z-index: -1;
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      background: linear-gradient(10deg, lighten($val, 10%), darken($val, 10%));
      transition: all 0.35s ease-in;
      @if $key ==
        black or
        $key ==
        lightblack or
        $key ==
        darkblack or
        $key ==
        neonblack or
        $key ==
        brown or
        $key ==
        darkbrown
      {
        color: white;
      } @else {
        color: black;
      }
      &::before {
        border-color: $val;
        box-shadow: 0 0 60px lighten($val, 10%);
      }
      &:hover::before {
        opacity: 1;
        width: 115%;
        height: 130%;
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        background: linear-gradient(
          10deg,
          lighten($val, 10%),
          darken($val, 10%)
        );
        transition: all 0.35s ease-in;
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &::before {
          border-color: $val2;
          box-shadow: 0 0 60px lighten($val2, 10%);
        }
        &:hover::before {
          opacity: 1;
          width: 115%;
          height: 130%;
        }
      }
    }
  }
}

.btn-pulse {
  position: relative;
  background: transparent;
  border: none;
  &::before {
    position: absolute;
    content: "";
    top: 50%;
    left: 50%;
    border-radius: inherit;
    background: $black;
    transform: translate(-50%, -50%);
    z-index: -1;
    animation: pulse 1.5s infinite;
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      @if $key ==
        black or
        $key ==
        lightblack or
        $key ==
        darkblack or
        $key ==
        neonblack or
        $key ==
        brown or
        $key ==
        darkbrown
      {
        color: white;
      } @else {
        color: black;
      }
      &::before {
        background: linear-gradient(
          10deg,
          lighten($val, 10%),
          darken($val, 10%)
        );
        box-shadow: 0 0 60px lighten($val, 10%);
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &::before {
          background: linear-gradient(
            10deg,
            lighten($val, 10%),
            darken($val2, 10%)
          );
          box-shadow: 0 0 60px lighten($val, 10%);
        }
      }
    }
  }
}
.btn-pulse-fast {
  position: relative;
  background: transparent;
  border: none;
  &::before {
    position: absolute;
    content: "";
    top: 50%;
    left: 50%;
    border-radius: inherit;
    background: green;
    transform: translate(-50%, -50%);
    z-index: -1;
    animation: pulse 1.5s infinite;
  }
  &::after {
    position: absolute;
    content: "";
    top: 50%;
    left: 50%;
    border-radius: inherit;
    background: green;
    transform: translate(-50%, -50%);
    z-index: -1;
    animation: pulse 1.5s infinite;
    animation-delay: 0.75s;
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      @if $key ==
        black or
        $key ==
        lightblack or
        $key ==
        darkblack or
        $key ==
        neonblack or
        $key ==
        brown or
        $key ==
        darkbrown
      {
        color: white;
      } @else {
        color: black;
      }
      &::before,
      &::after {
        background: linear-gradient(
          10deg,
          lighten($val, 10%),
          darken($val, 10%)
        );
        box-shadow: 0 0 60px lighten($val, 10%);
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &::before,
        &::after {
          background: linear-gradient(
            10deg,
            lighten($val, 10%),
            darken($val2, 10%)
          );
          box-shadow: 0 0 60px lighten($val, 10%);
        }
      }
    }
  }
}

@keyframes pulse {
  0% {
    width: 0;
    height: 0;
    opacity: 1;
  }
  100% {
    width: 100%;
    height: 100%;
    opacity: 0;
  }
}

//Button move
.btn-move {
  position: relative;
  margin: 0 auto;
  background: transparent;
  outline: none;
  border: none;
  color: #fff;

  &::after,
  &::before {
    content: "";
    position: absolute;
    height: 100%;
    width: 50%;
    transform: skewX(30deg);
    transition: all 0.5s cubic-bezier(0.68, -0.6, 0.32, 1.6);
    z-index: -2;
  }
  &::before {
    top: -20%;
    left: 0rem;
  }
  &::after {
    top: 20%;
    left: 50%;
  }
  &:hover {
    &::before,
    &::after {
      top: 0;
      transform: skewx(0deg);
    }
    &::after {
      left: 0;
    }
    &::before {
      left: 50%;
    }
  }
  @each $key, $val in $colors {
    &.color-#{$key} {
      @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
      &::before,
      &::after {
        background: linear-gradient(
          10deg,
          lighten($val, 10%),
          darken($val, 10%)
        );
      }
    }
  }
  @each $key, $val in $colors {
    @each $key2, $val2 in $colors {
      &.color-#{$key}-#{$key2} {
        @if $key ==
          black or
          $key ==
          lightblack or
          $key ==
          darkblack or
          $key ==
          neonblack or
          $key ==
          brown or
          $key ==
          darkbrown
        {
          color: white;
        } @else {
          color: black;
        }
        &::before,
        &::after {
          background: linear-gradient(
            10deg,
            lighten($val, 10%),
            darken($val, 10%)
          );
        }
        &::after {
          background: linear-gradient(
            10deg,
            lighten($val2, 10%),
            darken($val2, 10%)
          );
        }
      }
    }
  }
}
